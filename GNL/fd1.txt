Hola que tal estas
yo bien y tu
bien


char	*get_next_line(int fd)
{
    char	*buf; // Puntero a una cadena de caracteres que se utilizará para almacenar los bytes leídos del archivo
    char	*line; // Puntero a una cadena de caracteres que se utilizará para almacenar la línea completa
    char	c; // Variable de carácter que se utilizará para leer el archivo byte por byte
    int		size; // Variable entera que se utilizará para realizar un seguimiento del tamaño del búfer
    int		bytes_read; // Variable entera que se utilizará para realizar un seguimiento del número de bytes leídos del archivo

    size = 0; // Inicializamos el tamaño del búfer en 0
    buf = malloc(100); // Inicializamos el búfer con un tamaño fijo de 100 bytes utilizando malloc
    line = NULL; // Inicializamos la línea en NULL
    while ((bytes_read = read(fd, &c, 1)) > 0) // Mientras se sigan leyendo bytes del archivo
    {
        if (c == '\n') // Si encontramos un salto de línea, salimos del bucle
            break;
        if (size == 99) // Verificar si se ha alcanzado el tamaño máximo del búfer
        {
            buf[size] = '\0'; // Agregamos un carácter nulo al final del búfer
            if (!line) // Si la línea está vacía, duplicamos el contenido del búfer
                line = strdup(buf);
            else // Si la línea ya tiene contenido, concatenamos el contenido actual del búfer con la línea
                line = strjoin(line, buf);
            size = 0; // Reiniciamos el tamaño del búfer
        }
        buf[size] = c; // Agregamos el byte leído al búfer
        size++; // Incrementamos el tamaño del búfer
    }
    if (size > 0) // Si queda algún contenido en el búfer después de salir del bucle while, lo agregamos a la línea
    {
        buf[size] = '\0'; // Agregamos un carácter nulo al final del búfer
        if (!line) // Si la línea está vacía, duplicamos el contenido del búfer
            line = strdup(buf);
        else // Si la línea ya tiene contenido, concatenamos el contenido actual del búfer con la línea
            line = strjoin(line, buf);
    }
    free(buf); // Liberamos la memoria asignada al búfer
    return (line); // Devolvemos la línea como resultado
}